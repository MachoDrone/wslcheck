#!/bin/bash

# Add one blank line at the beginning
echo ""

# Ask about VPN (for screenshot purposes)
#read -p "Are you on a VPN? ( y / n ): " vpn_response
#echo -e "\e[32mVPN response:\e[0m $vpn_response"

# Check WSL2 version, with null byte removal to avoid warnings
wsl_output=$(/mnt/c/Windows/System32/wsl.exe --version 2>/dev/null | tr -d '\000')
echo -e "\e[32mExpect WSL v 2.0.7+\e[0m"
if [ -n "$wsl_output" ]; then
  echo -e "\e[32mWSL version:\e[0m $(echo "$wsl_output" | grep "WSL version:" | awk '{print $3 }')"
  echo -e "\e[32mWindows version:\e[0m $(echo "$wsl_output" | grep "Windows version:" | awk '{print $3 }')"
else
  echo -e "\e[32mWSL version:\e[0m Unable to check"
  echo -e "\e[32mWindows version:\e[0m Unable to check"
fi

# Check Linux distribution with Nosana warning
distro_release=$(lsb_release -rs 2>/dev/null)
echo -e "\e[32mLinux Distribution:\e[0m $(lsb_release -ds) ($(lsb_release -cs))"
if [ "$distro_release" != "22.04" ]; then
  echo -e "\e[32mNosana Warning:\e[0m Ubuntu 22.04 required for WSL2; $distro_release detected (may cause compatibility issues)"
fi

# Systemd status
echo -e "\e[32mSystemd status:\e[0m $(systemctl is-system-running 2>/dev/null || echo "Not running")"

# Check for cgroup v1 - improved logic
v2_type=$(stat -fc %T /sys/fs/cgroup)
echo -e "\e[32mcgroup v1 check:\e[0m"
if [ "$v2_type" = "cgroup2fs" ]; then
  echo -e "\e[32mcgroup v1:\e[0m Not active (cgroup v2 detected)"
else
  echo -e "\e[32mcgroup v1:\e[0m Active"
fi

# Check if cgroup v1 is active
echo -e "\e[32mIs cgroup v1 active?:\e[0m $(if mount | grep -q cgroup; then echo 'Yes'; else echo 'No'; fi)"

# Check for cgroup v2
echo -e "\e[32mcgroup v2 check:\e[0m"
echo "$v2_type"
echo -e "\e[32mExpected for v2:\e[0m cgroup2fs"

# Check if cgroup v2 is active
echo -e "\e[32mIs cgroup v2 active?:\e[0m $(if [ "$v2_type" = "cgroup2fs" ]; then echo 'Yes'; else echo 'No'; fi)"

# Check if bip is applied (assuming Docker daemon.json)
echo -e "\e[32mCheck if bip is applied in Docker config:\e[0m"
if [ -f ~/.docker/daemon.json ]; then
  cat ~/.docker/daemon.json | grep bip || echo "bip not found in daemon.json"
else
  echo "daemon.json not found"
fi
echo -e "\e[32mExpected:\e[0m \"bip\": \"192.168.200.1/24\" or similar"

# Check conmon version
echo -e "\e[32mconmon version:\e[0m"
conmon --version 2>/dev/null || echo "conmon not found"
echo -e "\e[32mExpected:\e[0m vs conmon 2.1.2+ (downgrade to 2.1.2 if container errors occur)"

# Podman version
podman_ver=$(podman --version | awk '/podman version/ {print $3}' 2>/dev/null || echo "Podman not found")
echo -e "\e[32mpodman version\e[0m $podman_ver"

# Podman info
echo -e "\e[32mPodman info:\e[0m"
podman info 2>/dev/null | grep -E 'host:|error' || echo "Unable to retrieve (Podman may not be running)"

# Docker version
docker_ver=$(docker --version | sed 's/Docker version //' | sed 's/, build.*/, build .../' 2>/dev/null || echo "Docker not found")
echo -e "\e[32mDocker version\e[0m $docker_ver"

# Docker WSL integration
echo -e "\e[32mDocker WSL integration:\e[0m $(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -c "if (Test-Path 'HKCU:\Software\Docker Inc.\Docker Desktop') { 'Enabled (check settings)' } else { 'Not detected' }" 2>/dev/null || echo "Unable to check")"

# Show Windows DNS servers
echo -e "\e[32mWindows DNS servers:\e[0m $(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -c "\$all = @(); Get-DnsClientServerAddress -AddressFamily IPv4 | ForEach { \$all += \$_.ServerAddresses }; (\$all | Sort-Object -Unique) -join ','" 2>/dev/null || echo "Unable to retrieve")"

# Show WSL DNS server settings, eliminating specific auto-generated comment lines
echo -e "\e[32mWSL DNS server settings:\e[0m"
cat /etc/resolv.conf | grep -v "^# This file was automatically generated by WSL." 2>/dev/null || echo "Unable to read /etc/resolv.conf"

# Nosana API connectivity test
echo -e "\e[32mNosana API connectivity:\e[0m $(curl -Is https://api.nosana.io/health | head -n1 2>/dev/null | awk '{print $2}' || echo "Failed to connect") (expected: 200 OK)"

# Windows Firewall check - trim extra blank lines and format cleanly
echo -e "\e[32mWindows Firewall status:\e[0m"
fw_output=$(/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe -c "Get-NetFirewallProfile | Select-Object Name, Enabled | Out-String -Width 80" 2>/dev/null | sed '/^$/d; /^\s*$/d' | sed 's/^\s*//;s/\s*$//' || echo "Unable to retrieve")
echo "$fw_output"

# Show free virtual disk space in WSL2 vs Windows C:
wsl_free=$(df -h / | awk 'NR==2 {print $4}' 2>/dev/null)
win_free=$(df -h /mnt/c | awk 'NR==2 {print $4}' 2>/dev/null)
echo -e "\e[32mFree space:\e[0m WSL ${wsl_free} vs ${win_free} Windows"

# NVIDIA GPU VRAM vs PC RAM
gpu_vram=$(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits 2>/dev/null | awk '{sum += $1} END {print int(sum/1024)}' || echo "0")
pc_ram=$(free -g | awk '/Mem:/ {print $2}' 2>/dev/null || echo "0")
echo -e "\e[32mNVIDIA GPU VRAM vs PC RAM:\e[0m ${gpu_vram}/${pc_ram} GB"

# NVIDIA Container Toolkit CDI check
echo -e "\e[32mNVIDIA CDI config:\e[0m"
if [ -f /etc/cdi/nvidia.yaml ]; then
  echo "File exists; devices: $(nvidia-ctk cdi list 2>/dev/null | wc -l || echo "Unable to list")"
else
  echo "File not found (/etc/cdi/nvidia.yaml missing)"
fi

# Podman GPU test
echo -e "\e[32mPodman GPU test:\e[0m"
podman run --rm --device nvidia.com/gpu=all --security-opt=label=disable ubuntu nvidia-smi -L 2>&1 | head -n 3 || echo "Test failed (check Podman/NVIDIA setup)"

# .wslconfig settings
echo -e "\e[32m.wslconfig settings:\e[0m"
windows_username=$(whoami 2>/dev/null)
if [ -f "/mnt/c/Users/$windows_username/.wslconfig" ]; then
  cat "/mnt/c/Users/$windows_username/.wslconfig" 2>/dev/null
else
  echo "File not found"
fi
echo " " && echo "Are you using a VPN? ( y / n ):
